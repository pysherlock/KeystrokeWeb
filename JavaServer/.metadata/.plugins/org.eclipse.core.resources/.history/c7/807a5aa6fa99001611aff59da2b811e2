package in.environmental.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Objects;

import in.environmental.model.User;

public class UserDAOImpl implements UserDAO{
	
	Database db = new Database();
	

	@Override
	public User getUserByUsername(String username, String password, String processor , String memory, String os , String chrome, String storage, String locIP, String pubIP , String country, String region , String zip,
	    	String charge, String tabIndex, String removable , String transition, String priv , String width, String height, String url, String press , String zoom, String click , String selected,
	    	String lastCharacter, String detach, String closetab , String bookmarkChange, String volumeChange , String volume, String muted, String paused, String speedChange , String currentTime, String ended , String seek) {
		User user = new User();
		try {
			Connection connection = db.getConnection();
			PreparedStatement ps = connection.prepareStatement("SELECT * FROM users WHERE username LIKE ? AND password LIKE ?");
			ps.setString(1, username);
			ps.setString(2, password);
			ResultSet rs = ps.executeQuery();
			while(rs.next()){
				double threshold= rs.getInt("score") * 0.85;
				int user_score=0;
				
				if (rs.getString("processor")!=null  && Objects.equals(rs.getString("processor"), processor)  && Objects.equals(rs.getString("memory"), memory)  && Objects.equals(rs.getString("os"), os)  && Objects.equals(rs.getString("chrome"), chrome)  && Objects.equals(rs.getString("storage"), storage)) {
					user_score+=3;}
				if (rs.getString("pubIP")!=null  && Objects.equals(rs.getString("pubIP"), pubIP)  && Objects.equals(rs.getString("locIP"), locIP)) {
					user_score+=3;}
				if (rs.getString("country")!=null  && Objects.equals(rs.getString("country"), country)  && Objects.equals(rs.getString("region"), region)  && Objects.equals(rs.getString("zip"), zip)) {
					user_score+=3;}
				if (rs.getString("charge")!=null && Objects.equals(rs.getString("charge"), charge)){
					user_score+=1;
				}
				if (rs.getString("tabIndex")!=null && Objects.equals(rs.getString("tabIndex"), tabIndex)){
					user_score+=2;
				}
				if (rs.getString("removable")!=null && Objects.equals(rs.getString("removable"), removable)){
					user_score+=1;
				}
				if (rs.getString("transition")!=null && Objects.equals(rs.getString("transition"), transition)){
					user_score+=2;
				}
				if (rs.getString("priv")!=null && Objects.equals(rs.getString("priv"), priv)){
					user_score+=1;
				}
				if (rs.getString("width")!=null && Objects.equals(rs.getString("width"), width)){
					user_score+=2;
				}
				if (rs.getString("height")!=null && Objects.equals(rs.getString("height"), height)){
					user_score+=2;
				}
				if (rs.getString("url")!=null && Objects.equals(rs.getString("url"), url)){
					user_score+=4;
				}
				if (rs.getString("press")!=null && Objects.equals(rs.getString("press"), press)){
					user_score+=1;
				}
				if (rs.getString("selected")!=null && Objects.equals(rs.getString("selected"), selected)){
					user_score+=2;
				}
				if (rs.getString("lastCharacter")!=null && Objects.equals(rs.getString("lastCharacter"), lastCharacter)){
					user_score+=2;
				}
				if (rs.getString("detach")!=null && Objects.equals(rs.getString("detach"), detach)){
					user_score+=1;
				}
				if (rs.getString("closetab")!=null && Objects.equals(rs.getString("closetab"), closetab)){
					user_score+=1;
				}
				if (rs.getString("bookmarkChange")!=null && Objects.equals(rs.getString("bookmarkChange"), bookmarkChange)){
					user_score+=1;
				}
				if (rs.getString("volumeChange")!=null && Objects.equals(rs.getString("volumeChange"), volumeChange)){
					user_score+=1;
				}
				if (rs.getString("volume")!=null && Objects.equals(rs.getString("volume"), volume)){
					user_score+=2;
				}
				if (rs.getString("muted")!=null && Objects.equals(rs.getString("muted"), muted)){
					user_score+=1;
				}
				if (rs.getString("paused")!=null && Objects.equals(rs.getString("paused"), paused)){
					user_score+=1;
				}
				if (rs.getString("speedChange")!=null && Objects.equals(rs.getString("speedChange"), speedChange)){
					user_score+=1;
				}
				if (rs.getString("currentTime")!=null && Objects.equals(rs.getString("currentTime"), currentTime)){
					user_score+=3;
				}
				if (rs.getString("ended")!=null && Objects.equals(rs.getString("ended"), ended)){
					user_score+=1;
				}
				if (rs.getString("seek")!=null && Objects.equals(rs.getString("seek"), seek)){
					user_score+=1;
				}
				
				System.out.println("user_score: "+ user_score + "\nthreshold: " + threshold);
		    	if (user_score>threshold) {
				user.setId(rs.getInt("id"));
			    user.setUsername(rs.getString("username"));
			}
	   }} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return user;
	}

	@Override
	public int createOrUpdateUser(User u) {
		int result = 0;
		try {
			Connection connection = db.getConnection();
			PreparedStatement ps = connection.prepareStatement("SELECT * FROM users WHERE username LIKE ? ");
			ps.setString(1, u.getUsername());
			ResultSet rs = ps.executeQuery();
			if (rs.next()) { System.out.println("Use");result=-1; return result;}
			else{
		    ps = connection.prepareStatement("INSERT INTO users (username,password, processor, memory, os,chrome, storage,locIP,pubIP,country,region,zip,charge,tabIndex,removable,transition,priv,width,height,url,press,zoom,click,selected,lastCharacter,detach,closetab,bookmarkChange,volumeChange,volume,muted,paused,speedChange,currentTime,ended,seek,score) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			ps.setString(1, u.getUsername());
			ps.setString(2, u.getPassword());
			if (u.getHardware_factor()==null) {
				ps.setString(3, null);
				ps.setString(4, null);
				ps.setString(5, null);
				ps.setString(6, null);
				ps.setString(7, null);
			}
			else{
			ps.setString(3, u.getProcessor());
			ps.setString(4, u.getMemory());
			ps.setString(5, u.getOs());
			ps.setString(6, u.getChrome());
			ps.setString(7, u.getStorage());}
			if (u.getIP_factor()==null) {
				ps.setString(8, null);
				ps.setString(9, null);}
			else{
			ps.setString(8, u.getLocIP());
			ps.setString(9, u.getPubIP());}
			if (u.getLocation_factor()==null) {
				ps.setString(10, null);
				ps.setString(11, null);
				ps.setString(12, null);}
			else{
			ps.setString(10, u.getCountry());
			ps.setString(11, u.getRegion());
			ps.setString(12, u.getZip());}
			if (u.getCharge_factor()==null) {
				ps.setString(13, null);
			}
			else{
			ps.setString(13, u.getCharge());}
			if (u.getTabIndex_factor()==null) {
				ps.setString(14, null);
			}
			else{
			ps.setString(14, u.getTabIndex());}
			if (u.getRemovable_factor()==null) {
				ps.setString(15, null);
			}
			else{
			ps.setString(15, u.getRemovable());}
			if (u.getTransition_factor()==null) {
				ps.setString(16, null);
			}
			else{
			ps.setString(16, u.getTransition());}
			if (u.getPriv_factor()==null) {
				ps.setString(17, null);
			}
			else{
			ps.setString(17, u.getPriv());}
			if (u.getWidth_factor()==null) {
				ps.setString(18, null);
			}
			else{
			ps.setString(18, u.getWidth());}
			if (u.getHeight_factor()==null) {
				ps.setString(19, null);
			}
			else{
			ps.setString(19, u.getHeight());}
			if (u.getUrl_factor()==null) {
				ps.setString(20, null);
			}
			else{
			ps.setString(20, u.getUrl());}
			if (u.getPress_factor()==null) {
				ps.setString(21, null);
			}
			else{
			ps.setString(21, u.getPress());}
			if (u.getZoom_factor()==null) {
				ps.setString(22, null);
			}
			else{
			ps.setString(22, u.getZoom());}
			if (u.getClick_factor()==null) {
				ps.setString(23, null);
			}
			else{
			ps.setString(23, u.getClick());}
			if (u.getSelected_factor()==null) {
				ps.setString(24, null);
			}
			else{
			ps.setString(24, u.getSelected());}
			if (u.getLastCharacter_factor()==null) {
				ps.setString(25, null);
			}
			else{
			ps.setString(25, u.getLastCharacter());}
			if (u.getDetach_factor()==null) {
				ps.setString(26, null);
			}
			else{
			ps.setString(26, u.getDetach());}
			if (u.getClosetab_factor()==null) {
				ps.setString(27, null);
			}
			else{
			ps.setString(27, u.getClosetab());}
			if (u.getBookmarkChange_factor()==null) {
				ps.setString(28, null);
			}
			else{
			ps.setString(28, u.getBookmarkChange());}
			if (u.getVolumeChange_factor()==null) {
				ps.setString(29, null);
			}
			else{
			ps.setString(29, u.getVolumeChange());}
			if (u.getVolume_factor()==null) {
				ps.setString(30, null);
			}
			else{
			ps.setString(30, u.getVolume());}
			if (u.getMuted_factor()==null) {
				ps.setString(31, null);
			}
			else{
			ps.setString(31, u.getMuted());}
			if (u.getPaused_factor()==null) {
				ps.setString(32, null);
			}
			else{
			ps.setString(32, u.getPaused());}
			if (u.getSpeedChange_factor()==null) {
				ps.setString(33, null);
			}
			else{
			ps.setString(33, u.getSpeedChange());}
			if (u.getCurrentTime_factor()==null) {
				ps.setString(34, null);
			}
			else{
			ps.setString(34, u.getCurrentTime());}
			if (u.getEnded_factor()==null) {
				ps.setString(35, null);
			}
			else{
			ps.setString(35, u.getEnded());}
			if (u.getSeek_factor()==null) {
				ps.setString(36, null);
			}
			else{
			ps.setString(36, u.getSeek());}
			ps.setInt(37, u.getScore());
			result = ps.executeUpdate();
			}	
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result; 
		
	}

}
